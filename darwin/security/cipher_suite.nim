##
##  Copyright (c) 1999-2002,2005-2007,2010-2014 Apple Inc. All Rights Reserved.
##
##  @APPLE_LICENSE_HEADER_START@
##
##  This file contains Original Code and/or Modifications of Original Code
##  as defined in and that are subject to the Apple Public Source License
##  Version 2.0 (the 'License'). You may not use this file except in
##  compliance with the License. Please obtain a copy of the License at
##  http://www.opensource.apple.com/apsl/ and read it before using this
##  file.
##
##  The Original Code and all software distributed under the License are
##  distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
##  EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
##  INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
##  FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
##  Please see the License for the specific language governing rights and
##  limitations under the License.
##
##  @APPLE_LICENSE_HEADER_END@
##
##
##  CipherSuite.h - SSL Cipher Suite definitions.
##

##
##  Defined as enum for debugging, but in the protocol
##  it is actually exactly two bytes
##

when TARGET_OS_IPHONE and not TARGET_OS_MACCATALYST:
  ##  16-bit value on iOS
  type
    SSLCipherSuite* = uint16_t
else:
  ##  32-bit value elsewhere
  type
    SSLCipherSuite* = uint32_t
const
  SSL_NULL_WITH_NULL_NULL* = 0x00000000
  SSL_RSA_WITH_NULL_MD5* = 0x00000001
  SSL_RSA_WITH_NULL_SHA* = 0x00000002
  SSL_RSA_EXPORT_WITH_RC4_40_MD5* = 0x00000003
  SSL_RSA_WITH_RC4_128_MD5* = 0x00000004
  SSL_RSA_WITH_RC4_128_SHA* = 0x00000005
  SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5* = 0x00000006
  SSL_RSA_WITH_IDEA_CBC_SHA* = 0x00000007
  SSL_RSA_EXPORT_WITH_DES40_CBC_SHA* = 0x00000008
  SSL_RSA_WITH_DES_CBC_SHA* = 0x00000009
  SSL_RSA_WITH_3DES_EDE_CBC_SHA* = 0x0000000A
  SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA* = 0x0000000B
  SSL_DH_DSS_WITH_DES_CBC_SHA* = 0x0000000C
  SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA* = 0x0000000D
  SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA* = 0x0000000E
  SSL_DH_RSA_WITH_DES_CBC_SHA* = 0x0000000F
  SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA* = 0x00000010
  SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA* = 0x00000011
  SSL_DHE_DSS_WITH_DES_CBC_SHA* = 0x00000012
  SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA* = 0x00000013
  SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA* = 0x00000014
  SSL_DHE_RSA_WITH_DES_CBC_SHA* = 0x00000015
  SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA* = 0x00000016
  SSL_DH_anon_EXPORT_WITH_RC4_40_MD5* = 0x00000017
  SSL_DH_anon_WITH_RC4_128_MD5* = 0x00000018
  SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA* = 0x00000019
  SSL_DH_anon_WITH_DES_CBC_SHA* = 0x0000001A
  SSL_DH_anon_WITH_3DES_EDE_CBC_SHA* = 0x0000001B
  SSL_FORTEZZA_DMS_WITH_NULL_SHA* = 0x0000001C
  SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA* = 0x0000001D ##  TLS addenda using AES, per RFC 3268
  TLS_RSA_WITH_AES_128_CBC_SHA* = 0x0000002F
  TLS_DH_DSS_WITH_AES_128_CBC_SHA* = 0x00000030
  TLS_DH_RSA_WITH_AES_128_CBC_SHA* = 0x00000031
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA* = 0x00000032
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA* = 0x00000033
  TLS_DH_anon_WITH_AES_128_CBC_SHA* = 0x00000034
  TLS_RSA_WITH_AES_256_CBC_SHA* = 0x00000035
  TLS_DH_DSS_WITH_AES_256_CBC_SHA* = 0x00000036
  TLS_DH_RSA_WITH_AES_256_CBC_SHA* = 0x00000037
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA* = 0x00000038
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA* = 0x00000039
  TLS_DH_anon_WITH_AES_256_CBC_SHA* = 0x0000003A ##  ECDSA addenda, RFC 4492
  TLS_ECDH_ECDSA_WITH_NULL_SHA* = 0x0000C001
  TLS_ECDH_ECDSA_WITH_RC4_128_SHA* = 0x0000C002
  TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA* = 0x0000C003
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA* = 0x0000C004
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA* = 0x0000C005
  TLS_ECDHE_ECDSA_WITH_NULL_SHA* = 0x0000C006
  TLS_ECDHE_ECDSA_WITH_RC4_128_SHA* = 0x0000C007
  TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA* = 0x0000C008
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA* = 0x0000C009
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA* = 0x0000C00A
  TLS_ECDH_RSA_WITH_NULL_SHA* = 0x0000C00B
  TLS_ECDH_RSA_WITH_RC4_128_SHA* = 0x0000C00C
  TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA* = 0x0000C00D
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA* = 0x0000C00E
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA* = 0x0000C00F
  TLS_ECDHE_RSA_WITH_NULL_SHA* = 0x0000C010
  TLS_ECDHE_RSA_WITH_RC4_128_SHA* = 0x0000C011
  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA* = 0x0000C012
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA* = 0x0000C013
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA* = 0x0000C014
  TLS_ECDH_anon_WITH_NULL_SHA* = 0x0000C015
  TLS_ECDH_anon_WITH_RC4_128_SHA* = 0x0000C016
  TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA* = 0x0000C017
  TLS_ECDH_anon_WITH_AES_128_CBC_SHA* = 0x0000C018
  TLS_ECDH_anon_WITH_AES_256_CBC_SHA* = 0x0000C019 ##  ECDHE_PSK Cipher Suites for Transport Layer Security (TLS), RFC 5489
  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA* = 0x0000C035
  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA* = 0x0000C036 ##  ChaCha20-Poly1305 Cipher Suites for Transport Layer Security (TLS), RFC 7905
  TLS_PSK_WITH_CHACHA20_POLY1305_SHA256* = 0x0000CCAB ##  TLS 1.2 addenda, RFC 5246
                                                   ##  Initial state.
  TLS_NULL_WITH_NULL_NULL* = 0x00000000 ##  Server provided RSA certificate for key exchange.
  TLS_RSA_WITH_NULL_MD5* = 0x00000001
  TLS_RSA_WITH_NULL_SHA* = 0x00000002
  TLS_RSA_WITH_RC4_128_MD5* = 0x00000004
  TLS_RSA_WITH_RC4_128_SHA* = 0x00000005
  TLS_RSA_WITH_3DES_EDE_CBC_SHA* = 0x0000000A
  TLS_RSA_WITH_NULL_SHA256* = 0x0000003B
  TLS_RSA_WITH_AES_128_CBC_SHA256* = 0x0000003C
  TLS_RSA_WITH_AES_256_CBC_SHA256* = 0x0000003D ##  Server-authenticated (and optionally client-authenticated) Diffie-Hellman.
  TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA* = 0x0000000D
  TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA* = 0x00000010
  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA* = 0x00000013
  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA* = 0x00000016
  TLS_DH_DSS_WITH_AES_128_CBC_SHA256* = 0x0000003E
  TLS_DH_RSA_WITH_AES_128_CBC_SHA256* = 0x0000003F
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256* = 0x00000040
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256* = 0x00000067
  TLS_DH_DSS_WITH_AES_256_CBC_SHA256* = 0x00000068
  TLS_DH_RSA_WITH_AES_256_CBC_SHA256* = 0x00000069
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA256* = 0x0000006A
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256* = 0x0000006B ##  Completely anonymous Diffie-Hellman
  TLS_DH_anon_WITH_RC4_128_MD5* = 0x00000018
  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA* = 0x0000001B
  TLS_DH_anon_WITH_AES_128_CBC_SHA256* = 0x0000006C
  TLS_DH_anon_WITH_AES_256_CBC_SHA256* = 0x0000006D ##  Addendum from RFC 4279, TLS PSK
  TLS_PSK_WITH_RC4_128_SHA* = 0x0000008A
  TLS_PSK_WITH_3DES_EDE_CBC_SHA* = 0x0000008B
  TLS_PSK_WITH_AES_128_CBC_SHA* = 0x0000008C
  TLS_PSK_WITH_AES_256_CBC_SHA* = 0x0000008D
  TLS_DHE_PSK_WITH_RC4_128_SHA* = 0x0000008E
  TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA* = 0x0000008F
  TLS_DHE_PSK_WITH_AES_128_CBC_SHA* = 0x00000090
  TLS_DHE_PSK_WITH_AES_256_CBC_SHA* = 0x00000091
  TLS_RSA_PSK_WITH_RC4_128_SHA* = 0x00000092
  TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA* = 0x00000093
  TLS_RSA_PSK_WITH_AES_128_CBC_SHA* = 0x00000094
  TLS_RSA_PSK_WITH_AES_256_CBC_SHA* = 0x00000095 ##  RFC 4785 - Pre-Shared Key (PSK) Ciphersuites with NULL Encryption
  TLS_PSK_WITH_NULL_SHA* = 0x0000002C
  TLS_DHE_PSK_WITH_NULL_SHA* = 0x0000002D
  TLS_RSA_PSK_WITH_NULL_SHA* = 0x0000002E ##  Addenda from rfc 5288 AES Galois Counter Mode (GCM) Cipher Suites for TLS.
  TLS_RSA_WITH_AES_128_GCM_SHA256* = 0x0000009C
  TLS_RSA_WITH_AES_256_GCM_SHA384* = 0x0000009D
  TLS_DHE_RSA_WITH_AES_128_GCM_SHA256* = 0x0000009E
  TLS_DHE_RSA_WITH_AES_256_GCM_SHA384* = 0x0000009F
  TLS_DH_RSA_WITH_AES_128_GCM_SHA256* = 0x000000A0
  TLS_DH_RSA_WITH_AES_256_GCM_SHA384* = 0x000000A1
  TLS_DHE_DSS_WITH_AES_128_GCM_SHA256* = 0x000000A2
  TLS_DHE_DSS_WITH_AES_256_GCM_SHA384* = 0x000000A3
  TLS_DH_DSS_WITH_AES_128_GCM_SHA256* = 0x000000A4
  TLS_DH_DSS_WITH_AES_256_GCM_SHA384* = 0x000000A5
  TLS_DH_anon_WITH_AES_128_GCM_SHA256* = 0x000000A6
  TLS_DH_anon_WITH_AES_256_GCM_SHA384* = 0x000000A7 ##  RFC 5487 - PSK with SHA-256/384 and AES GCM
  TLS_PSK_WITH_AES_128_GCM_SHA256* = 0x000000A8
  TLS_PSK_WITH_AES_256_GCM_SHA384* = 0x000000A9
  TLS_DHE_PSK_WITH_AES_128_GCM_SHA256* = 0x000000AA
  TLS_DHE_PSK_WITH_AES_256_GCM_SHA384* = 0x000000AB
  TLS_RSA_PSK_WITH_AES_128_GCM_SHA256* = 0x000000AC
  TLS_RSA_PSK_WITH_AES_256_GCM_SHA384* = 0x000000AD
  TLS_PSK_WITH_AES_128_CBC_SHA256* = 0x000000AE
  TLS_PSK_WITH_AES_256_CBC_SHA384* = 0x000000AF
  TLS_PSK_WITH_NULL_SHA256* = 0x000000B0
  TLS_PSK_WITH_NULL_SHA384* = 0x000000B1
  TLS_DHE_PSK_WITH_AES_128_CBC_SHA256* = 0x000000B2
  TLS_DHE_PSK_WITH_AES_256_CBC_SHA384* = 0x000000B3
  TLS_DHE_PSK_WITH_NULL_SHA256* = 0x000000B4
  TLS_DHE_PSK_WITH_NULL_SHA384* = 0x000000B5
  TLS_RSA_PSK_WITH_AES_128_CBC_SHA256* = 0x000000B6
  TLS_RSA_PSK_WITH_AES_256_CBC_SHA384* = 0x000000B7
  TLS_RSA_PSK_WITH_NULL_SHA256* = 0x000000B8
  TLS_RSA_PSK_WITH_NULL_SHA384* = 0x000000B9 ##  TLS 1.3 standard cipher suites for ChaCha20+Poly1305.
                                          ##        Note: TLS 1.3 ciphersuites do not specify the key exchange
                                          ##        algorithm -- they only specify the symmetric ciphers.
  TLS_AES_128_GCM_SHA256* = 0x00001301
  TLS_AES_256_GCM_SHA384* = 0x00001302
  TLS_CHACHA20_POLY1305_SHA256* = 0x00001303
  TLS_AES_128_CCM_SHA256* = 0x00001304
  TLS_AES_128_CCM_8_SHA256* = 0x00001305 ##  Addenda from rfc 5289  Elliptic Curve Cipher Suites with
                                      ##        HMAC SHA-256/384.
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256* = 0x0000C023
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384* = 0x0000C024
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256* = 0x0000C025
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384* = 0x0000C026
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256* = 0x0000C027
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384* = 0x0000C028
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256* = 0x0000C029
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384* = 0x0000C02A ##  Addenda from rfc 5289  Elliptic Curve Cipher Suites with
                                                  ##        SHA-256/384 and AES Galois Counter Mode (GCM)
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256* = 0x0000C02B
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384* = 0x0000C02C
  TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256* = 0x0000C02D
  TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384* = 0x0000C02E
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256* = 0x0000C02F
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384* = 0x0000C030
  TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256* = 0x0000C031
  TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384* = 0x0000C032 ##  Addenda from rfc 7905  ChaCha20-Poly1305 Cipher Suites for
                                                  ##      Transport Layer Security (TLS).
  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256* = 0x0000CCA8
  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256* = 0x0000CCA9 ##  RFC 5746 - Secure Renegotiation
  TLS_EMPTY_RENEGOTIATION_INFO_SCSV* = 0x000000FF ##  Tags for SSL 2 cipher kinds which are not specified
                                               ##  for SSL 3.
  SSL_RSA_WITH_RC2_CBC_MD5* = 0x0000FF80
  SSL_RSA_WITH_IDEA_CBC_MD5* = 0x0000FF81
  SSL_RSA_WITH_DES_CBC_MD5* = 0x0000FF82
  SSL_RSA_WITH_3DES_EDE_CBC_MD5* = 0x0000FF83
  SSL_NO_SUCH_CIPHERSUITE* = 0x0000FFFF

##
##  Convenience ciphersuite groups that collate ciphersuites of comparable security
##  properties into a single alias.
##

type
  SSLCiphersuiteGroup* = cint

const
  kSSLCiphersuiteGroupDefault* = 0
  kSSLCiphersuiteGroupCompatibility* = 1
  kSSLCiphersuiteGroupLegacy* = 2
  kSSLCiphersuiteGroupATS* = 3
  kSSLCiphersuiteGroupATSCompatibility* = 4
